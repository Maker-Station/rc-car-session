
Thunder_firmware_v1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000936  000009ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000936  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080011a  0080011a  000009e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001427  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b35  00000000  00000000  00001f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000937  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  000033e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000838  00000000  00000000  00003704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af9  00000000  00000000  00003f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004a35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_18>
  4c:	0c 94 85 02 	jmp	0x50a	; 0x50a <__vector_19>
  50:	0c 94 46 02 	jmp	0x48c	; 0x48c <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 32       	cpi	r26, 0x2B	; 43
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cd 02 	call	0x59a	; 0x59a <main>
  9e:	0c 94 99 04 	jmp	0x932	; 0x932 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <advance_pointer>:
{
	//assert(cbuf && cbuf->buffer);

    cbuf->buffer[cbuf->head] = data;

    advance_pointer(cbuf);
  a6:	fc 01       	movw	r30, r24
  a8:	80 85       	ldd	r24, Z+8	; 0x08
  aa:	88 23       	and	r24, r24
  ac:	49 f0       	breq	.+18     	; 0xc0 <advance_pointer+0x1a>
  ae:	84 81       	ldd	r24, Z+4	; 0x04
  b0:	95 81       	ldd	r25, Z+5	; 0x05
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	66 81       	ldd	r22, Z+6	; 0x06
  b6:	77 81       	ldd	r23, Z+7	; 0x07
  b8:	0e 94 42 03 	call	0x684	; 0x684 <__udivmodhi4>
  bc:	95 83       	std	Z+5, r25	; 0x05
  be:	84 83       	std	Z+4, r24	; 0x04
  c0:	82 81       	ldd	r24, Z+2	; 0x02
  c2:	93 81       	ldd	r25, Z+3	; 0x03
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	66 81       	ldd	r22, Z+6	; 0x06
  c8:	77 81       	ldd	r23, Z+7	; 0x07
  ca:	0e 94 42 03 	call	0x684	; 0x684 <__udivmodhi4>
  ce:	93 83       	std	Z+3, r25	; 0x03
  d0:	82 83       	std	Z+2, r24	; 0x02
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	44 81       	ldd	r20, Z+4	; 0x04
  d6:	55 81       	ldd	r21, Z+5	; 0x05
  d8:	48 17       	cp	r20, r24
  da:	59 07       	cpc	r21, r25
  dc:	09 f0       	breq	.+2      	; 0xe0 <advance_pointer+0x3a>
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	20 87       	std	Z+8, r18	; 0x08
  e2:	08 95       	ret

000000e4 <circular_buf_init>:
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	8c 01       	movw	r16, r24
  ee:	eb 01       	movw	r28, r22
  f0:	89 e0       	ldi	r24, 0x09	; 9
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 78 03 	call	0x6f0	; 0x6f0 <malloc>
  f8:	fc 01       	movw	r30, r24
  fa:	11 83       	std	Z+1, r17	; 0x01
  fc:	00 83       	st	Z, r16
  fe:	d7 83       	std	Z+7, r29	; 0x07
 100:	c6 83       	std	Z+6, r28	; 0x06
 102:	13 82       	std	Z+3, r1	; 0x03
 104:	12 82       	std	Z+2, r1	; 0x02
 106:	15 82       	std	Z+5, r1	; 0x05
 108:	14 82       	std	Z+4, r1	; 0x04
 10a:	10 86       	std	Z+8, r1	; 0x08
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <circular_buf_size>:
 116:	fc 01       	movw	r30, r24
 118:	86 81       	ldd	r24, Z+6	; 0x06
 11a:	97 81       	ldd	r25, Z+7	; 0x07
 11c:	20 85       	ldd	r18, Z+8	; 0x08
 11e:	21 11       	cpse	r18, r1
 120:	0f c0       	rjmp	.+30     	; 0x140 <circular_buf_size+0x2a>
 122:	42 81       	ldd	r20, Z+2	; 0x02
 124:	53 81       	ldd	r21, Z+3	; 0x03
 126:	24 81       	ldd	r18, Z+4	; 0x04
 128:	35 81       	ldd	r19, Z+5	; 0x05
 12a:	42 17       	cp	r20, r18
 12c:	53 07       	cpc	r21, r19
 12e:	20 f0       	brcs	.+8      	; 0x138 <circular_buf_size+0x22>
 130:	ca 01       	movw	r24, r20
 132:	82 1b       	sub	r24, r18
 134:	93 0b       	sbc	r25, r19
 136:	08 95       	ret
 138:	84 0f       	add	r24, r20
 13a:	95 1f       	adc	r25, r21
 13c:	82 1b       	sub	r24, r18
 13e:	93 0b       	sbc	r25, r19
 140:	08 95       	ret

00000142 <circular_buf_put2>:
{
    int r = -1;

    //assert(cbuf && cbuf->buffer);

    if(!circular_buf_full(cbuf))
 142:	dc 01       	movw	r26, r24
 144:	18 96       	adiw	r26, 0x08	; 8
 146:	2c 91       	ld	r18, X
 148:	18 97       	sbiw	r26, 0x08	; 8
 14a:	21 11       	cpse	r18, r1
 14c:	0f c0       	rjmp	.+30     	; 0x16c <circular_buf_put2+0x2a>
    {
        cbuf->buffer[cbuf->head] = data;
 14e:	ed 91       	ld	r30, X+
 150:	fc 91       	ld	r31, X
 152:	11 97       	sbiw	r26, 0x01	; 1
 154:	12 96       	adiw	r26, 0x02	; 2
 156:	2d 91       	ld	r18, X+
 158:	3c 91       	ld	r19, X
 15a:	13 97       	sbiw	r26, 0x03	; 3
 15c:	e2 0f       	add	r30, r18
 15e:	f3 1f       	adc	r31, r19
 160:	60 83       	st	Z, r22
        advance_pointer(cbuf);
 162:	0e 94 53 00 	call	0xa6	; 0xa6 <advance_pointer>
        r = 0;
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	08 95       	ret
    advance_pointer(cbuf);
}

int circular_buf_put2(cbuf_handle_t cbuf, uint8_t data)
{
    int r = -1;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	9f ef       	ldi	r25, 0xFF	; 255
        advance_pointer(cbuf);
        r = 0;
    }

    return r;
}
 170:	08 95       	ret

00000172 <circular_buf_empty>:

    return r;
}

bool circular_buf_empty(cbuf_handle_t cbuf)
{
 172:	fc 01       	movw	r30, r24
	//assert(cbuf);

    return (!cbuf->full && (cbuf->head == cbuf->tail));
 174:	80 85       	ldd	r24, Z+8	; 0x08
 176:	81 11       	cpse	r24, r1
 178:	0b c0       	rjmp	.+22     	; 0x190 <circular_buf_empty+0x1e>
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	42 81       	ldd	r20, Z+2	; 0x02
 17e:	53 81       	ldd	r21, Z+3	; 0x03
 180:	24 81       	ldd	r18, Z+4	; 0x04
 182:	35 81       	ldd	r19, Z+5	; 0x05
 184:	42 17       	cp	r20, r18
 186:	53 07       	cpc	r21, r19
 188:	09 f0       	breq	.+2      	; 0x18c <circular_buf_empty+0x1a>
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	89 2f       	mov	r24, r25
 18e:	01 c0       	rjmp	.+2      	; 0x192 <circular_buf_empty+0x20>
 190:	80 e0       	ldi	r24, 0x00	; 0
}
 192:	81 70       	andi	r24, 0x01	; 1
 194:	08 95       	ret

00000196 <circular_buf_get>:

    return r;
}

int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
{
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	ec 01       	movw	r28, r24
 1a0:	8b 01       	movw	r16, r22
    //assert(cbuf && data && cbuf->buffer);

    int r = -1;

    if(!circular_buf_empty(cbuf))
 1a2:	0e 94 b9 00 	call	0x172	; 0x172 <circular_buf_empty>
 1a6:	81 11       	cpse	r24, r1
 1a8:	16 c0       	rjmp	.+44     	; 0x1d6 <circular_buf_get+0x40>
    {
        *data = cbuf->buffer[cbuf->tail];
 1aa:	e8 81       	ld	r30, Y
 1ac:	f9 81       	ldd	r31, Y+1	; 0x01
 1ae:	8c 81       	ldd	r24, Y+4	; 0x04
 1b0:	9d 81       	ldd	r25, Y+5	; 0x05
 1b2:	e8 0f       	add	r30, r24
 1b4:	f9 1f       	adc	r31, r25
 1b6:	80 81       	ld	r24, Z
 1b8:	f8 01       	movw	r30, r16
 1ba:	80 83       	st	Z, r24

static void retreat_pointer(cbuf_handle_t cbuf)
{
	//assert(cbuf);

	cbuf->full = false;
 1bc:	18 86       	std	Y+8, r1	; 0x08
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
 1be:	8c 81       	ldd	r24, Y+4	; 0x04
 1c0:	9d 81       	ldd	r25, Y+5	; 0x05
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	6e 81       	ldd	r22, Y+6	; 0x06
 1c6:	7f 81       	ldd	r23, Y+7	; 0x07
 1c8:	0e 94 42 03 	call	0x684	; 0x684 <__udivmodhi4>
 1cc:	9d 83       	std	Y+5, r25	; 0x05
 1ce:	8c 83       	std	Y+4, r24	; 0x04
    if(!circular_buf_empty(cbuf))
    {
        *data = cbuf->buffer[cbuf->tail];
        retreat_pointer(cbuf);

        r = 0;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <circular_buf_get+0x44>

int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
{
    //assert(cbuf && data && cbuf->buffer);

    int r = -1;
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	9f ef       	ldi	r25, 0xFF	; 255

        r = 0;
    }

    return r;
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <circular_buf_full>:
bool circular_buf_full(cbuf_handle_t cbuf)
{
	//assert(cbuf);

    return cbuf->full;
}
 1e4:	fc 01       	movw	r30, r24
 1e6:	80 85       	ldd	r24, Z+8	; 0x08
 1e8:	08 95       	ret

000001ea <lib_usart_get_defaults>:
			return 1;			
	}
	
	*ch = UDR0;
	return 0;
}
 1ea:	fc 01       	movw	r30, r24
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	95 e2       	ldi	r25, 0x25	; 37
 1f0:	a0 e0       	ldi	r26, 0x00	; 0
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	80 83       	st	Z, r24
 1f6:	91 83       	std	Z+1, r25	; 0x01
 1f8:	a2 83       	std	Z+2, r26	; 0x02
 1fa:	b3 83       	std	Z+3, r27	; 0x03
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	85 83       	std	Z+5, r24	; 0x05
 200:	14 82       	std	Z+4, r1	; 0x04
 202:	16 82       	std	Z+6, r1	; 0x06
 204:	17 82       	std	Z+7, r1	; 0x07
 206:	80 e4       	ldi	r24, 0x40	; 64
 208:	82 87       	std	Z+10, r24	; 0x0a
 20a:	81 87       	std	Z+9, r24	; 0x09
 20c:	14 86       	std	Z+12, r1	; 0x0c
 20e:	13 86       	std	Z+11, r1	; 0x0b
 210:	16 86       	std	Z+14, r1	; 0x0e
 212:	15 86       	std	Z+13, r1	; 0x0d
 214:	08 95       	ret

00000216 <lib_usart_init>:
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	ec 01       	movw	r28, r24
 220:	80 e4       	ldi	r24, 0x40	; 64
 222:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 226:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 22a:	e2 ec       	ldi	r30, 0xC2	; 194
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	86 e0       	ldi	r24, 0x06	; 6
 230:	80 83       	st	Z, r24
 232:	80 81       	ld	r24, Z
 234:	8f 73       	andi	r24, 0x3F	; 63
 236:	9c 81       	ldd	r25, Y+4	; 0x04
 238:	89 2b       	or	r24, r25
 23a:	80 83       	st	Z, r24
 23c:	8c 81       	ldd	r24, Y+4	; 0x04
 23e:	88 23       	and	r24, r24
 240:	21 f0       	breq	.+8      	; 0x24a <lib_usart_init+0x34>
 242:	80 34       	cpi	r24, 0x40	; 64
 244:	09 f0       	breq	.+2      	; 0x248 <lib_usart_init+0x32>
 246:	74 c0       	rjmp	.+232    	; 0x330 <lib_usart_init+0x11a>
 248:	14 c0       	rjmp	.+40     	; 0x272 <lib_usart_init+0x5c>
 24a:	28 81       	ld	r18, Y
 24c:	39 81       	ldd	r19, Y+1	; 0x01
 24e:	4a 81       	ldd	r20, Y+2	; 0x02
 250:	5b 81       	ldd	r21, Y+3	; 0x03
 252:	60 e9       	ldi	r22, 0x90	; 144
 254:	70 ed       	ldi	r23, 0xD0	; 208
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 56 03 	call	0x6ac	; 0x6ac <__udivmodsi4>
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	31 09       	sbc	r19, r1
 262:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 266:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 26a:	8d 81       	ldd	r24, Y+5	; 0x05
 26c:	87 30       	cpi	r24, 0x07	; 7
 26e:	59 f4       	brne	.+22     	; 0x286 <lib_usart_init+0x70>
 270:	11 c0       	rjmp	.+34     	; 0x294 <lib_usart_init+0x7e>
 272:	e2 ec       	ldi	r30, 0xC2	; 194
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	8e 7f       	andi	r24, 0xFE	; 254
 27a:	98 85       	ldd	r25, Y+8	; 0x08
 27c:	89 2b       	or	r24, r25
 27e:	80 83       	st	Z, r24
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	5d c0       	rjmp	.+186    	; 0x340 <lib_usart_init+0x12a>
 286:	e2 ec       	ldi	r30, 0xC2	; 194
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	90 81       	ld	r25, Z
 28c:	99 7f       	andi	r25, 0xF9	; 249
 28e:	89 2b       	or	r24, r25
 290:	80 83       	st	Z, r24
 292:	0d c0       	rjmp	.+26     	; 0x2ae <lib_usart_init+0x98>
 294:	e2 ec       	ldi	r30, 0xC2	; 194
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	86 60       	ori	r24, 0x06	; 6
 29c:	80 83       	st	Z, r24
 29e:	e1 ec       	ldi	r30, 0xC1	; 193
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	84 60       	ori	r24, 0x04	; 4
 2a6:	80 83       	st	Z, r24
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <dFrameis9x>
 2ae:	e2 ec       	ldi	r30, 0xC2	; 194
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	87 7f       	andi	r24, 0xF7	; 247
 2b6:	9f 81       	ldd	r25, Y+7	; 0x07
 2b8:	89 2b       	or	r24, r25
 2ba:	80 83       	st	Z, r24
 2bc:	80 81       	ld	r24, Z
 2be:	8f 7c       	andi	r24, 0xCF	; 207
 2c0:	9e 81       	ldd	r25, Y+6	; 0x06
 2c2:	89 2b       	or	r24, r25
 2c4:	80 83       	st	Z, r24
 2c6:	0a 85       	ldd	r16, Y+10	; 0x0a
 2c8:	10 e0       	ldi	r17, 0x00	; 0
 2ca:	c8 01       	movw	r24, r16
 2cc:	0e 94 78 03 	call	0x6f0	; 0x6f0 <malloc>
 2d0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <rxBuffer+0x1>
 2d4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <rxBuffer>
 2d8:	00 97       	sbiw	r24, 0x00	; 0
 2da:	69 f1       	breq	.+90     	; 0x336 <lib_usart_init+0x120>
 2dc:	b8 01       	movw	r22, r16
 2de:	0e 94 72 00 	call	0xe4	; 0xe4 <circular_buf_init>
 2e2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <rxRingBuff+0x1>
 2e6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <rxRingBuff>
 2ea:	09 85       	ldd	r16, Y+9	; 0x09
 2ec:	10 e0       	ldi	r17, 0x00	; 0
 2ee:	c8 01       	movw	r24, r16
 2f0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <malloc>
 2f4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 2f8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
 2fc:	00 97       	sbiw	r24, 0x00	; 0
 2fe:	f1 f0       	breq	.+60     	; 0x33c <lib_usart_init+0x126>
 300:	b8 01       	movw	r22, r16
 302:	0e 94 72 00 	call	0xe4	; 0xe4 <circular_buf_init>
 306:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <txRingBuff+0x1>
 30a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <txRingBuff>
 30e:	8b 85       	ldd	r24, Y+11	; 0x0b
 310:	9c 85       	ldd	r25, Y+12	; 0x0c
 312:	00 97       	sbiw	r24, 0x00	; 0
 314:	21 f0       	breq	.+8      	; 0x31e <lib_usart_init+0x108>
 316:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <rxCallback+0x1>
 31a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <rxCallback>
 31e:	e1 ec       	ldi	r30, 0xC1	; 193
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	88 69       	ori	r24, 0x98	; 152
 326:	80 83       	st	Z, r24
 328:	78 94       	sei
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	08 c0       	rjmp	.+16     	; 0x340 <lib_usart_init+0x12a>
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	05 c0       	rjmp	.+10     	; 0x340 <lib_usart_init+0x12a>
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <lib_usart_init+0x12a>
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	08 95       	ret

0000034a <lib_usart_write_byte>:
 34a:	cf 93       	push	r28
 34c:	c8 2f       	mov	r28, r24
 34e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <txRingBuff>
 352:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <txRingBuff+0x1>
 356:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <circular_buf_full>
 35a:	81 11       	cpse	r24, r1
 35c:	0f c0       	rjmp	.+30     	; 0x37c <lib_usart_write_byte+0x32>
 35e:	6c 2f       	mov	r22, r28
 360:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <txRingBuff>
 364:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <txRingBuff+0x1>
 368:	0e 94 a1 00 	call	0x142	; 0x142 <circular_buf_put2>
 36c:	e1 ec       	ldi	r30, 0xC1	; 193
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	80 62       	ori	r24, 0x20	; 32
 374:	80 83       	st	Z, r24
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <lib_usart_write_byte+0x36>
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <lib_usart_write>:
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	66 23       	and	r22, r22
 38e:	d9 f0       	breq	.+54     	; 0x3c6 <lib_usart_write+0x42>
 390:	8c 01       	movw	r16, r24
 392:	ec 01       	movw	r28, r24
 394:	61 50       	subi	r22, 0x01	; 1
 396:	26 2f       	mov	r18, r22
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	2f 5f       	subi	r18, 0xFF	; 255
 39c:	3f 4f       	sbci	r19, 0xFF	; 255
 39e:	02 0f       	add	r16, r18
 3a0:	13 1f       	adc	r17, r19
 3a2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <txRingBuff>
 3a6:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <txRingBuff+0x1>
 3aa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <circular_buf_full>
 3ae:	81 11       	cpse	r24, r1
 3b0:	12 c0       	rjmp	.+36     	; 0x3d6 <lib_usart_write+0x52>
 3b2:	69 91       	ld	r22, Y+
 3b4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <txRingBuff>
 3b8:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <txRingBuff+0x1>
 3bc:	0e 94 a1 00 	call	0x142	; 0x142 <circular_buf_put2>
 3c0:	c0 17       	cp	r28, r16
 3c2:	d1 07       	cpc	r29, r17
 3c4:	71 f7       	brne	.-36     	; 0x3a2 <lib_usart_write+0x1e>
 3c6:	e1 ec       	ldi	r30, 0xC1	; 193
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	80 62       	ori	r24, 0x20	; 32
 3ce:	80 83       	st	Z, r24
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <lib_usart_write+0x56>
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	08 95       	ret

000003e4 <lib_usart_available>:
@return -
	true  - if data available
	false - if no data in rx buffer
*/
bool lib_usart_available(){
	if(circular_buf_size(rxRingBuff) > 0)
 3e4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <rxRingBuff>
 3e8:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <rxRingBuff+0x1>
 3ec:	0e 94 8b 00 	call	0x116	; 0x116 <circular_buf_size>
 3f0:	21 e0       	ldi	r18, 0x01	; 1
 3f2:	89 2b       	or	r24, r25
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <lib_usart_available+0x14>
 3f6:	20 e0       	ldi	r18, 0x00	; 0
		return true;
	
	return false;
}
 3f8:	82 2f       	mov	r24, r18
 3fa:	08 95       	ret

000003fc <lib_usart_read>:
	void
@return -
	char - data byte. 
	
*/
char lib_usart_read(){
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	1f 92       	push	r1
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	if( !circular_buf_get(rxRingBuff, &data))
 406:	be 01       	movw	r22, r28
 408:	6f 5f       	subi	r22, 0xFF	; 255
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <rxRingBuff>
 410:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <rxRingBuff+0x1>
 414:	0e 94 cb 00 	call	0x196	; 0x196 <circular_buf_get>
 418:	89 2b       	or	r24, r25
 41a:	11 f4       	brne	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		return data;
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	01 c0       	rjmp	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
	
	return  0;	
 420:	80 e0       	ldi	r24, 0x00	; 0
}
 422:	0f 90       	pop	r0
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <__vector_18>:
@param -
	void
@return -
	void
*/
ISR(USART_RX_vect){
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	2f 93       	push	r18
 436:	3f 93       	push	r19
 438:	4f 93       	push	r20
 43a:	5f 93       	push	r21
 43c:	6f 93       	push	r22
 43e:	7f 93       	push	r23
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	af 93       	push	r26
 446:	bf 93       	push	r27
 448:	ef 93       	push	r30
 44a:	ff 93       	push	r31
	
	/* TODO -- ERROR check */
	
	
	/*push to ring buffer if space available */
	ch = UDR0;
 44c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	//if(!circular_buf_full(rxBuffer))
	circular_buf_put2(rxRingBuff, ch);
 450:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <rxRingBuff>
 454:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <rxRingBuff+0x1>
 458:	0e 94 a1 00 	call	0x142	; 0x142 <circular_buf_put2>
	
	/*callback user function*/
	if(rxCallback != NULL)
 45c:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <rxCallback>
 460:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <rxCallback+0x1>
 464:	30 97       	sbiw	r30, 0x00	; 0
 466:	09 f0       	breq	.+2      	; 0x46a <__vector_18+0x40>
		rxCallback();
 468:	09 95       	icall
}
 46a:	ff 91       	pop	r31
 46c:	ef 91       	pop	r30
 46e:	bf 91       	pop	r27
 470:	af 91       	pop	r26
 472:	9f 91       	pop	r25
 474:	8f 91       	pop	r24
 476:	7f 91       	pop	r23
 478:	6f 91       	pop	r22
 47a:	5f 91       	pop	r21
 47c:	4f 91       	pop	r20
 47e:	3f 91       	pop	r19
 480:	2f 91       	pop	r18
 482:	0f 90       	pop	r0
 484:	0f be       	out	0x3f, r0	; 63
 486:	0f 90       	pop	r0
 488:	1f 90       	pop	r1
 48a:	18 95       	reti

0000048c <__vector_20>:
@param -
	void
@return -
	void
*/
ISR(USART_TX_vect){
 48c:	1f 92       	push	r1
 48e:	0f 92       	push	r0
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	0f 92       	push	r0
 494:	11 24       	eor	r1, r1
 496:	2f 93       	push	r18
 498:	3f 93       	push	r19
 49a:	4f 93       	push	r20
 49c:	5f 93       	push	r21
 49e:	6f 93       	push	r22
 4a0:	7f 93       	push	r23
 4a2:	8f 93       	push	r24
 4a4:	9f 93       	push	r25
 4a6:	af 93       	push	r26
 4a8:	bf 93       	push	r27
 4aa:	ef 93       	push	r30
 4ac:	ff 93       	push	r31
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	1f 92       	push	r1
 4b4:	cd b7       	in	r28, 0x3d	; 61
 4b6:	de b7       	in	r29, 0x3e	; 62
	uint8_t ch;
	
	/* TODO -- ERROR check */

	/* put next data to be transmitted to the buffer if data available */
	if(!circular_buf_get(txRingBuff, &ch))
 4b8:	be 01       	movw	r22, r28
 4ba:	6f 5f       	subi	r22, 0xFF	; 255
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255
 4be:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <txRingBuff>
 4c2:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <txRingBuff+0x1>
 4c6:	0e 94 cb 00 	call	0x196	; 0x196 <circular_buf_get>
 4ca:	89 2b       	or	r24, r25
 4cc:	19 f4       	brne	.+6      	; 0x4d4 <__vector_20+0x48>
		UDR0 = ch;
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	/*callback user function*/
	if(txCallback != NULL)
 4d4:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <txCallback>
 4d8:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <txCallback+0x1>
 4dc:	30 97       	sbiw	r30, 0x00	; 0
 4de:	09 f0       	breq	.+2      	; 0x4e2 <__vector_20+0x56>
		txCallback();
 4e0:	09 95       	icall
}
 4e2:	0f 90       	pop	r0
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	ff 91       	pop	r31
 4ea:	ef 91       	pop	r30
 4ec:	bf 91       	pop	r27
 4ee:	af 91       	pop	r26
 4f0:	9f 91       	pop	r25
 4f2:	8f 91       	pop	r24
 4f4:	7f 91       	pop	r23
 4f6:	6f 91       	pop	r22
 4f8:	5f 91       	pop	r21
 4fa:	4f 91       	pop	r20
 4fc:	3f 91       	pop	r19
 4fe:	2f 91       	pop	r18
 500:	0f 90       	pop	r0
 502:	0f be       	out	0x3f, r0	; 63
 504:	0f 90       	pop	r0
 506:	1f 90       	pop	r1
 508:	18 95       	reti

0000050a <__vector_19>:
@param -
	void
@return -
	void
*/
ISR(USART_UDRE_vect){
 50a:	1f 92       	push	r1
 50c:	0f 92       	push	r0
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	0f 92       	push	r0
 512:	11 24       	eor	r1, r1
 514:	2f 93       	push	r18
 516:	3f 93       	push	r19
 518:	4f 93       	push	r20
 51a:	5f 93       	push	r21
 51c:	6f 93       	push	r22
 51e:	7f 93       	push	r23
 520:	8f 93       	push	r24
 522:	9f 93       	push	r25
 524:	af 93       	push	r26
 526:	bf 93       	push	r27
 528:	ef 93       	push	r30
 52a:	ff 93       	push	r31
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	1f 92       	push	r1
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
	uint8_t ch;
	
	/* disable this interrupt if there are no data in the buffer */
	if(circular_buf_empty(txRingBuff)){
 536:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <txRingBuff>
 53a:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <txRingBuff+0x1>
 53e:	0e 94 b9 00 	call	0x172	; 0x172 <circular_buf_empty>
 542:	88 23       	and	r24, r24
 544:	31 f0       	breq	.+12     	; 0x552 <__vector_19+0x48>
		UCSR0B &= ~_BV(UDRIE0);
 546:	e1 ec       	ldi	r30, 0xC1	; 193
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	8f 7d       	andi	r24, 0xDF	; 223
 54e:	80 83       	st	Z, r24
 550:	0c c0       	rjmp	.+24     	; 0x56a <__vector_19+0x60>
	}else{
		circular_buf_get(txRingBuff, &ch);
 552:	be 01       	movw	r22, r28
 554:	6f 5f       	subi	r22, 0xFF	; 255
 556:	7f 4f       	sbci	r23, 0xFF	; 255
 558:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <txRingBuff>
 55c:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <txRingBuff+0x1>
 560:	0e 94 cb 00 	call	0x196	; 0x196 <circular_buf_get>
		UDR0 = ch; 
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
}
 56a:	0f 90       	pop	r0
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	ff 91       	pop	r31
 572:	ef 91       	pop	r30
 574:	bf 91       	pop	r27
 576:	af 91       	pop	r26
 578:	9f 91       	pop	r25
 57a:	8f 91       	pop	r24
 57c:	7f 91       	pop	r23
 57e:	6f 91       	pop	r22
 580:	5f 91       	pop	r21
 582:	4f 91       	pop	r20
 584:	3f 91       	pop	r19
 586:	2f 91       	pop	r18
 588:	0f 90       	pop	r0
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	0f 90       	pop	r0
 58e:	1f 90       	pop	r1
 590:	18 95       	reti

00000592 <blinkOnRecieve>:
#include <stdbool.h>
#include "lib_usart.h"


void blinkOnRecieve(void){
	PORTC ^= 0xff;
 592:	88 b1       	in	r24, 0x08	; 8
 594:	80 95       	com	r24
 596:	88 b9       	out	0x08, r24	; 8
 598:	08 95       	ret

0000059a <main>:
}


int main(void){
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	cd b7       	in	r28, 0x3d	; 61
 5a0:	de b7       	in	r29, 0x3e	; 62
 5a2:	a2 97       	sbiw	r28, 0x22	; 34
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	de bf       	out	0x3e, r29	; 62
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ae:	2f e7       	ldi	r18, 0x7F	; 127
 5b0:	8a e1       	ldi	r24, 0x1A	; 26
 5b2:	96 e0       	ldi	r25, 0x06	; 6
 5b4:	21 50       	subi	r18, 0x01	; 1
 5b6:	80 40       	sbci	r24, 0x00	; 0
 5b8:	90 40       	sbci	r25, 0x00	; 0
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <main+0x1a>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <main+0x24>
 5be:	00 00       	nop
	_delay_ms(500);		//cold start delay
	
	/* initialize the serial block */
	struct usart_config_t config;
	lib_usart_get_defaults(&config);
 5c0:	ce 01       	movw	r24, r28
 5c2:	01 96       	adiw	r24, 0x01	; 1
 5c4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lib_usart_get_defaults>
	config.boudrate = 19200;
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	9b e4       	ldi	r25, 0x4B	; 75
 5cc:	a0 e0       	ldi	r26, 0x00	; 0
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	89 83       	std	Y+1, r24	; 0x01
 5d2:	9a 83       	std	Y+2, r25	; 0x02
 5d4:	ab 83       	std	Y+3, r26	; 0x03
 5d6:	bc 83       	std	Y+4, r27	; 0x04
	config.mode =  USART_ASYNCH_MODE;
 5d8:	1d 82       	std	Y+5, r1	; 0x05
	config.dFrameSize = USART_DATA_FRAME_8x;
 5da:	86 e0       	ldi	r24, 0x06	; 6
 5dc:	8e 83       	std	Y+6, r24	; 0x06
	config.parityMode = USART_PARITY_DISABLE;
 5de:	1f 82       	std	Y+7, r1	; 0x07
	config.stopBits = USART_STOPBITS_1x;
 5e0:	18 86       	std	Y+8, r1	; 0x08
	config.txBuffer_size = 80;
 5e2:	80 e5       	ldi	r24, 0x50	; 80
 5e4:	8a 87       	std	Y+10, r24	; 0x0a
	config.rxCallback = blinkOnRecieve;
 5e6:	89 ec       	ldi	r24, 0xC9	; 201
 5e8:	92 e0       	ldi	r25, 0x02	; 2
 5ea:	9d 87       	std	Y+13, r25	; 0x0d
 5ec:	8c 87       	std	Y+12, r24	; 0x0c
	if(lib_usart_init(&config)){				//initialize the serial port
 5ee:	ce 01       	movw	r24, r28
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	0e 94 0b 01 	call	0x216	; 0x216 <lib_usart_init>
 5f6:	89 2b       	or	r24, r25
 5f8:	09 f0       	breq	.+2      	; 0x5fc <main+0x62>
 5fa:	ff cf       	rjmp	.-2      	; 0x5fa <main+0x60>
		while(1);
	}
	
	char str1[] = "hello Atmega 328p!";
 5fc:	83 e1       	ldi	r24, 0x13	; 19
 5fe:	e6 e0       	ldi	r30, 0x06	; 6
 600:	f1 e0       	ldi	r31, 0x01	; 1
 602:	de 01       	movw	r26, r28
 604:	50 96       	adiw	r26, 0x10	; 16
 606:	01 90       	ld	r0, Z+
 608:	0d 92       	st	X+, r0
 60a:	8a 95       	dec	r24
 60c:	e1 f7       	brne	.-8      	; 0x606 <main+0x6c>
	int counter  = 0;
 60e:	00 e0       	ldi	r16, 0x00	; 0
 610:	10 e0       	ldi	r17, 0x00	; 0
			lib_usart_write_byte(lib_usart_read()+1);
		}
		
		/* */
		if(++counter == 10){
			lib_usart_write((uint8_t*)str1, strlen(str1));
 612:	7e 01       	movw	r14, r28
 614:	20 e1       	ldi	r18, 0x10	; 16
 616:	e2 0e       	add	r14, r18
 618:	f1 1c       	adc	r15, r1
 61a:	05 c0       	rjmp	.+10     	; 0x626 <main+0x8c>
	
	while (1) {
		
		/* uncomment for read test */
		while( lib_usart_available() ){
			lib_usart_write_byte(lib_usart_read()+1);
 61c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <lib_usart_read>
 620:	8f 5f       	subi	r24, 0xFF	; 255
 622:	0e 94 a5 01 	call	0x34a	; 0x34a <lib_usart_write_byte>
	//lib_usart_write((uint8_t* )str, strlen(str));
	
	while (1) {
		
		/* uncomment for read test */
		while( lib_usart_available() ){
 626:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lib_usart_available>
 62a:	81 11       	cpse	r24, r1
 62c:	f7 cf       	rjmp	.-18     	; 0x61c <main+0x82>
			lib_usart_write_byte(lib_usart_read()+1);
		}
		
		/* */
		if(++counter == 10){
 62e:	0f 5f       	subi	r16, 0xFF	; 255
 630:	1f 4f       	sbci	r17, 0xFF	; 255
 632:	0a 30       	cpi	r16, 0x0A	; 10
 634:	11 05       	cpc	r17, r1
 636:	e1 f4       	brne	.+56     	; 0x670 <main+0xd6>
			lib_usart_write((uint8_t*)str1, strlen(str1));
 638:	f7 01       	movw	r30, r14
 63a:	01 90       	ld	r0, Z+
 63c:	00 20       	and	r0, r0
 63e:	e9 f7       	brne	.-6      	; 0x63a <main+0xa0>
 640:	31 97       	sbiw	r30, 0x01	; 1
 642:	bf 01       	movw	r22, r30
 644:	6e 19       	sub	r22, r14
 646:	7f 09       	sbc	r23, r15
 648:	c7 01       	movw	r24, r14
 64a:	0e 94 c2 01 	call	0x384	; 0x384 <lib_usart_write>
			lib_usart_write_byte(10);
 64e:	8a e0       	ldi	r24, 0x0A	; 10
 650:	0e 94 a5 01 	call	0x34a	; 0x34a <lib_usart_write_byte>
			lib_usart_write_byte(13);
 654:	8d e0       	ldi	r24, 0x0D	; 13
 656:	0e 94 a5 01 	call	0x34a	; 0x34a <lib_usart_write_byte>
 65a:	8f e7       	ldi	r24, 0x7F	; 127
 65c:	9c ef       	ldi	r25, 0xFC	; 252
 65e:	2a e0       	ldi	r18, 0x0A	; 10
 660:	81 50       	subi	r24, 0x01	; 1
 662:	90 40       	sbci	r25, 0x00	; 0
 664:	20 40       	sbci	r18, 0x00	; 0
 666:	e1 f7       	brne	.-8      	; 0x660 <main+0xc6>
 668:	00 c0       	rjmp	.+0      	; 0x66a <main+0xd0>
 66a:	00 00       	nop
			counter = 0;
 66c:	00 e0       	ldi	r16, 0x00	; 0
 66e:	10 e0       	ldi	r17, 0x00	; 0
 670:	8f e7       	ldi	r24, 0x7F	; 127
 672:	98 e3       	ldi	r25, 0x38	; 56
 674:	21 e0       	ldi	r18, 0x01	; 1
 676:	81 50       	subi	r24, 0x01	; 1
 678:	90 40       	sbci	r25, 0x00	; 0
 67a:	20 40       	sbci	r18, 0x00	; 0
 67c:	e1 f7       	brne	.-8      	; 0x676 <main+0xdc>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <main+0xe6>
 680:	00 00       	nop
 682:	d1 cf       	rjmp	.-94     	; 0x626 <main+0x8c>

00000684 <__udivmodhi4>:
 684:	aa 1b       	sub	r26, r26
 686:	bb 1b       	sub	r27, r27
 688:	51 e1       	ldi	r21, 0x11	; 17
 68a:	07 c0       	rjmp	.+14     	; 0x69a <__udivmodhi4_ep>

0000068c <__udivmodhi4_loop>:
 68c:	aa 1f       	adc	r26, r26
 68e:	bb 1f       	adc	r27, r27
 690:	a6 17       	cp	r26, r22
 692:	b7 07       	cpc	r27, r23
 694:	10 f0       	brcs	.+4      	; 0x69a <__udivmodhi4_ep>
 696:	a6 1b       	sub	r26, r22
 698:	b7 0b       	sbc	r27, r23

0000069a <__udivmodhi4_ep>:
 69a:	88 1f       	adc	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	5a 95       	dec	r21
 6a0:	a9 f7       	brne	.-22     	; 0x68c <__udivmodhi4_loop>
 6a2:	80 95       	com	r24
 6a4:	90 95       	com	r25
 6a6:	bc 01       	movw	r22, r24
 6a8:	cd 01       	movw	r24, r26
 6aa:	08 95       	ret

000006ac <__udivmodsi4>:
 6ac:	a1 e2       	ldi	r26, 0x21	; 33
 6ae:	1a 2e       	mov	r1, r26
 6b0:	aa 1b       	sub	r26, r26
 6b2:	bb 1b       	sub	r27, r27
 6b4:	fd 01       	movw	r30, r26
 6b6:	0d c0       	rjmp	.+26     	; 0x6d2 <__udivmodsi4_ep>

000006b8 <__udivmodsi4_loop>:
 6b8:	aa 1f       	adc	r26, r26
 6ba:	bb 1f       	adc	r27, r27
 6bc:	ee 1f       	adc	r30, r30
 6be:	ff 1f       	adc	r31, r31
 6c0:	a2 17       	cp	r26, r18
 6c2:	b3 07       	cpc	r27, r19
 6c4:	e4 07       	cpc	r30, r20
 6c6:	f5 07       	cpc	r31, r21
 6c8:	20 f0       	brcs	.+8      	; 0x6d2 <__udivmodsi4_ep>
 6ca:	a2 1b       	sub	r26, r18
 6cc:	b3 0b       	sbc	r27, r19
 6ce:	e4 0b       	sbc	r30, r20
 6d0:	f5 0b       	sbc	r31, r21

000006d2 <__udivmodsi4_ep>:
 6d2:	66 1f       	adc	r22, r22
 6d4:	77 1f       	adc	r23, r23
 6d6:	88 1f       	adc	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	1a 94       	dec	r1
 6dc:	69 f7       	brne	.-38     	; 0x6b8 <__udivmodsi4_loop>
 6de:	60 95       	com	r22
 6e0:	70 95       	com	r23
 6e2:	80 95       	com	r24
 6e4:	90 95       	com	r25
 6e6:	9b 01       	movw	r18, r22
 6e8:	ac 01       	movw	r20, r24
 6ea:	bd 01       	movw	r22, r26
 6ec:	cf 01       	movw	r24, r30
 6ee:	08 95       	ret

000006f0 <malloc>:
 6f0:	0f 93       	push	r16
 6f2:	1f 93       	push	r17
 6f4:	cf 93       	push	r28
 6f6:	df 93       	push	r29
 6f8:	82 30       	cpi	r24, 0x02	; 2
 6fa:	91 05       	cpc	r25, r1
 6fc:	10 f4       	brcc	.+4      	; 0x702 <malloc+0x12>
 6fe:	82 e0       	ldi	r24, 0x02	; 2
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <__flp>
 706:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <__flp+0x1>
 70a:	20 e0       	ldi	r18, 0x00	; 0
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	a0 e0       	ldi	r26, 0x00	; 0
 710:	b0 e0       	ldi	r27, 0x00	; 0
 712:	30 97       	sbiw	r30, 0x00	; 0
 714:	19 f1       	breq	.+70     	; 0x75c <malloc+0x6c>
 716:	40 81       	ld	r20, Z
 718:	51 81       	ldd	r21, Z+1	; 0x01
 71a:	02 81       	ldd	r16, Z+2	; 0x02
 71c:	13 81       	ldd	r17, Z+3	; 0x03
 71e:	48 17       	cp	r20, r24
 720:	59 07       	cpc	r21, r25
 722:	c8 f0       	brcs	.+50     	; 0x756 <malloc+0x66>
 724:	84 17       	cp	r24, r20
 726:	95 07       	cpc	r25, r21
 728:	69 f4       	brne	.+26     	; 0x744 <malloc+0x54>
 72a:	10 97       	sbiw	r26, 0x00	; 0
 72c:	31 f0       	breq	.+12     	; 0x73a <malloc+0x4a>
 72e:	12 96       	adiw	r26, 0x02	; 2
 730:	0c 93       	st	X, r16
 732:	12 97       	sbiw	r26, 0x02	; 2
 734:	13 96       	adiw	r26, 0x03	; 3
 736:	1c 93       	st	X, r17
 738:	27 c0       	rjmp	.+78     	; 0x788 <malloc+0x98>
 73a:	00 93 29 01 	sts	0x0129, r16	; 0x800129 <__flp>
 73e:	10 93 2a 01 	sts	0x012A, r17	; 0x80012a <__flp+0x1>
 742:	22 c0       	rjmp	.+68     	; 0x788 <malloc+0x98>
 744:	21 15       	cp	r18, r1
 746:	31 05       	cpc	r19, r1
 748:	19 f0       	breq	.+6      	; 0x750 <malloc+0x60>
 74a:	42 17       	cp	r20, r18
 74c:	53 07       	cpc	r21, r19
 74e:	18 f4       	brcc	.+6      	; 0x756 <malloc+0x66>
 750:	9a 01       	movw	r18, r20
 752:	bd 01       	movw	r22, r26
 754:	ef 01       	movw	r28, r30
 756:	df 01       	movw	r26, r30
 758:	f8 01       	movw	r30, r16
 75a:	db cf       	rjmp	.-74     	; 0x712 <malloc+0x22>
 75c:	21 15       	cp	r18, r1
 75e:	31 05       	cpc	r19, r1
 760:	f9 f0       	breq	.+62     	; 0x7a0 <malloc+0xb0>
 762:	28 1b       	sub	r18, r24
 764:	39 0b       	sbc	r19, r25
 766:	24 30       	cpi	r18, 0x04	; 4
 768:	31 05       	cpc	r19, r1
 76a:	80 f4       	brcc	.+32     	; 0x78c <malloc+0x9c>
 76c:	8a 81       	ldd	r24, Y+2	; 0x02
 76e:	9b 81       	ldd	r25, Y+3	; 0x03
 770:	61 15       	cp	r22, r1
 772:	71 05       	cpc	r23, r1
 774:	21 f0       	breq	.+8      	; 0x77e <malloc+0x8e>
 776:	fb 01       	movw	r30, r22
 778:	93 83       	std	Z+3, r25	; 0x03
 77a:	82 83       	std	Z+2, r24	; 0x02
 77c:	04 c0       	rjmp	.+8      	; 0x786 <malloc+0x96>
 77e:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <__flp+0x1>
 782:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <__flp>
 786:	fe 01       	movw	r30, r28
 788:	32 96       	adiw	r30, 0x02	; 2
 78a:	44 c0       	rjmp	.+136    	; 0x814 <malloc+0x124>
 78c:	fe 01       	movw	r30, r28
 78e:	e2 0f       	add	r30, r18
 790:	f3 1f       	adc	r31, r19
 792:	81 93       	st	Z+, r24
 794:	91 93       	st	Z+, r25
 796:	22 50       	subi	r18, 0x02	; 2
 798:	31 09       	sbc	r19, r1
 79a:	39 83       	std	Y+1, r19	; 0x01
 79c:	28 83       	st	Y, r18
 79e:	3a c0       	rjmp	.+116    	; 0x814 <malloc+0x124>
 7a0:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <__brkval>
 7a4:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <__brkval+0x1>
 7a8:	23 2b       	or	r18, r19
 7aa:	41 f4       	brne	.+16     	; 0x7bc <malloc+0xcc>
 7ac:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 7b0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 7b4:	30 93 28 01 	sts	0x0128, r19	; 0x800128 <__brkval+0x1>
 7b8:	20 93 27 01 	sts	0x0127, r18	; 0x800127 <__brkval>
 7bc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 7c0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 7c4:	21 15       	cp	r18, r1
 7c6:	31 05       	cpc	r19, r1
 7c8:	41 f4       	brne	.+16     	; 0x7da <malloc+0xea>
 7ca:	2d b7       	in	r18, 0x3d	; 61
 7cc:	3e b7       	in	r19, 0x3e	; 62
 7ce:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 7d2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 7d6:	24 1b       	sub	r18, r20
 7d8:	35 0b       	sbc	r19, r21
 7da:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <__brkval>
 7de:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <__brkval+0x1>
 7e2:	e2 17       	cp	r30, r18
 7e4:	f3 07       	cpc	r31, r19
 7e6:	a0 f4       	brcc	.+40     	; 0x810 <malloc+0x120>
 7e8:	2e 1b       	sub	r18, r30
 7ea:	3f 0b       	sbc	r19, r31
 7ec:	28 17       	cp	r18, r24
 7ee:	39 07       	cpc	r19, r25
 7f0:	78 f0       	brcs	.+30     	; 0x810 <malloc+0x120>
 7f2:	ac 01       	movw	r20, r24
 7f4:	4e 5f       	subi	r20, 0xFE	; 254
 7f6:	5f 4f       	sbci	r21, 0xFF	; 255
 7f8:	24 17       	cp	r18, r20
 7fa:	35 07       	cpc	r19, r21
 7fc:	48 f0       	brcs	.+18     	; 0x810 <malloc+0x120>
 7fe:	4e 0f       	add	r20, r30
 800:	5f 1f       	adc	r21, r31
 802:	50 93 28 01 	sts	0x0128, r21	; 0x800128 <__brkval+0x1>
 806:	40 93 27 01 	sts	0x0127, r20	; 0x800127 <__brkval>
 80a:	81 93       	st	Z+, r24
 80c:	91 93       	st	Z+, r25
 80e:	02 c0       	rjmp	.+4      	; 0x814 <malloc+0x124>
 810:	e0 e0       	ldi	r30, 0x00	; 0
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	cf 01       	movw	r24, r30
 816:	df 91       	pop	r29
 818:	cf 91       	pop	r28
 81a:	1f 91       	pop	r17
 81c:	0f 91       	pop	r16
 81e:	08 95       	ret

00000820 <free>:
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	00 97       	sbiw	r24, 0x00	; 0
 826:	09 f4       	brne	.+2      	; 0x82a <free+0xa>
 828:	81 c0       	rjmp	.+258    	; 0x92c <__stack+0x2d>
 82a:	fc 01       	movw	r30, r24
 82c:	32 97       	sbiw	r30, 0x02	; 2
 82e:	13 82       	std	Z+3, r1	; 0x03
 830:	12 82       	std	Z+2, r1	; 0x02
 832:	a0 91 29 01 	lds	r26, 0x0129	; 0x800129 <__flp>
 836:	b0 91 2a 01 	lds	r27, 0x012A	; 0x80012a <__flp+0x1>
 83a:	10 97       	sbiw	r26, 0x00	; 0
 83c:	81 f4       	brne	.+32     	; 0x85e <free+0x3e>
 83e:	20 81       	ld	r18, Z
 840:	31 81       	ldd	r19, Z+1	; 0x01
 842:	82 0f       	add	r24, r18
 844:	93 1f       	adc	r25, r19
 846:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <__brkval>
 84a:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <__brkval+0x1>
 84e:	28 17       	cp	r18, r24
 850:	39 07       	cpc	r19, r25
 852:	51 f5       	brne	.+84     	; 0x8a8 <free+0x88>
 854:	f0 93 28 01 	sts	0x0128, r31	; 0x800128 <__brkval+0x1>
 858:	e0 93 27 01 	sts	0x0127, r30	; 0x800127 <__brkval>
 85c:	67 c0       	rjmp	.+206    	; 0x92c <__stack+0x2d>
 85e:	ed 01       	movw	r28, r26
 860:	20 e0       	ldi	r18, 0x00	; 0
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	ce 17       	cp	r28, r30
 866:	df 07       	cpc	r29, r31
 868:	40 f4       	brcc	.+16     	; 0x87a <free+0x5a>
 86a:	4a 81       	ldd	r20, Y+2	; 0x02
 86c:	5b 81       	ldd	r21, Y+3	; 0x03
 86e:	9e 01       	movw	r18, r28
 870:	41 15       	cp	r20, r1
 872:	51 05       	cpc	r21, r1
 874:	f1 f0       	breq	.+60     	; 0x8b2 <free+0x92>
 876:	ea 01       	movw	r28, r20
 878:	f5 cf       	rjmp	.-22     	; 0x864 <free+0x44>
 87a:	d3 83       	std	Z+3, r29	; 0x03
 87c:	c2 83       	std	Z+2, r28	; 0x02
 87e:	40 81       	ld	r20, Z
 880:	51 81       	ldd	r21, Z+1	; 0x01
 882:	84 0f       	add	r24, r20
 884:	95 1f       	adc	r25, r21
 886:	c8 17       	cp	r28, r24
 888:	d9 07       	cpc	r29, r25
 88a:	59 f4       	brne	.+22     	; 0x8a2 <free+0x82>
 88c:	88 81       	ld	r24, Y
 88e:	99 81       	ldd	r25, Y+1	; 0x01
 890:	84 0f       	add	r24, r20
 892:	95 1f       	adc	r25, r21
 894:	02 96       	adiw	r24, 0x02	; 2
 896:	91 83       	std	Z+1, r25	; 0x01
 898:	80 83       	st	Z, r24
 89a:	8a 81       	ldd	r24, Y+2	; 0x02
 89c:	9b 81       	ldd	r25, Y+3	; 0x03
 89e:	93 83       	std	Z+3, r25	; 0x03
 8a0:	82 83       	std	Z+2, r24	; 0x02
 8a2:	21 15       	cp	r18, r1
 8a4:	31 05       	cpc	r19, r1
 8a6:	29 f4       	brne	.+10     	; 0x8b2 <free+0x92>
 8a8:	f0 93 2a 01 	sts	0x012A, r31	; 0x80012a <__flp+0x1>
 8ac:	e0 93 29 01 	sts	0x0129, r30	; 0x800129 <__flp>
 8b0:	3d c0       	rjmp	.+122    	; 0x92c <__stack+0x2d>
 8b2:	e9 01       	movw	r28, r18
 8b4:	fb 83       	std	Y+3, r31	; 0x03
 8b6:	ea 83       	std	Y+2, r30	; 0x02
 8b8:	49 91       	ld	r20, Y+
 8ba:	59 91       	ld	r21, Y+
 8bc:	c4 0f       	add	r28, r20
 8be:	d5 1f       	adc	r29, r21
 8c0:	ec 17       	cp	r30, r28
 8c2:	fd 07       	cpc	r31, r29
 8c4:	61 f4       	brne	.+24     	; 0x8de <free+0xbe>
 8c6:	80 81       	ld	r24, Z
 8c8:	91 81       	ldd	r25, Z+1	; 0x01
 8ca:	84 0f       	add	r24, r20
 8cc:	95 1f       	adc	r25, r21
 8ce:	02 96       	adiw	r24, 0x02	; 2
 8d0:	e9 01       	movw	r28, r18
 8d2:	99 83       	std	Y+1, r25	; 0x01
 8d4:	88 83       	st	Y, r24
 8d6:	82 81       	ldd	r24, Z+2	; 0x02
 8d8:	93 81       	ldd	r25, Z+3	; 0x03
 8da:	9b 83       	std	Y+3, r25	; 0x03
 8dc:	8a 83       	std	Y+2, r24	; 0x02
 8de:	e0 e0       	ldi	r30, 0x00	; 0
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	12 96       	adiw	r26, 0x02	; 2
 8e4:	8d 91       	ld	r24, X+
 8e6:	9c 91       	ld	r25, X
 8e8:	13 97       	sbiw	r26, 0x03	; 3
 8ea:	00 97       	sbiw	r24, 0x00	; 0
 8ec:	19 f0       	breq	.+6      	; 0x8f4 <free+0xd4>
 8ee:	fd 01       	movw	r30, r26
 8f0:	dc 01       	movw	r26, r24
 8f2:	f7 cf       	rjmp	.-18     	; 0x8e2 <free+0xc2>
 8f4:	8d 91       	ld	r24, X+
 8f6:	9c 91       	ld	r25, X
 8f8:	11 97       	sbiw	r26, 0x01	; 1
 8fa:	9d 01       	movw	r18, r26
 8fc:	2e 5f       	subi	r18, 0xFE	; 254
 8fe:	3f 4f       	sbci	r19, 0xFF	; 255
 900:	82 0f       	add	r24, r18
 902:	93 1f       	adc	r25, r19
 904:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <__brkval>
 908:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <__brkval+0x1>
 90c:	28 17       	cp	r18, r24
 90e:	39 07       	cpc	r19, r25
 910:	69 f4       	brne	.+26     	; 0x92c <__stack+0x2d>
 912:	30 97       	sbiw	r30, 0x00	; 0
 914:	29 f4       	brne	.+10     	; 0x920 <__stack+0x21>
 916:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__flp+0x1>
 91a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__flp>
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0x25>
 920:	13 82       	std	Z+3, r1	; 0x03
 922:	12 82       	std	Z+2, r1	; 0x02
 924:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <__brkval+0x1>
 928:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <__brkval>
 92c:	df 91       	pop	r29
 92e:	cf 91       	pop	r28
 930:	08 95       	ret

00000932 <_exit>:
 932:	f8 94       	cli

00000934 <__stop_program>:
 934:	ff cf       	rjmp	.-2      	; 0x934 <__stop_program>
