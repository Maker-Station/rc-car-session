
Thunder_firmware_v1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800114  00800114  00000388  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be3  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ea  00000000  00000000  0000103b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000437  00000000  00000000  00001825  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000618  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a3  00000000  00000000  0000232c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000025cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  9e:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lib_usart_get_defaults>:
	struct usart_config_t *cfg - pointer to configurations

@return -
	
*/
void lib_usart_get_defaults(struct usart_config_t *cfg){
  a6:	fc 01       	movw	r30, r24
	cfg->boudrate = 9600;
  a8:	80 e8       	ldi	r24, 0x80	; 128
  aa:	95 e2       	ldi	r25, 0x25	; 37
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	80 83       	st	Z, r24
  b2:	91 83       	std	Z+1, r25	; 0x01
  b4:	a2 83       	std	Z+2, r26	; 0x02
  b6:	b3 83       	std	Z+3, r27	; 0x03
	cfg->dFrameSize = USART_DATA_FRAME_8x;
  b8:	86 e0       	ldi	r24, 0x06	; 6
  ba:	85 83       	std	Z+5, r24	; 0x05
	cfg->mode = USART_ASYNCH_MODE;
  bc:	14 82       	std	Z+4, r1	; 0x04
	cfg->parityMode = USART_PARITY_DISABLE;
  be:	16 82       	std	Z+6, r1	; 0x06
	cfg->stopBits = USART_STOPBITS_1x;
  c0:	17 82       	std	Z+7, r1	; 0x07
	cfg->rxBuffer_size = cfg->txBuffer_size = 1;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 87       	std	Z+8, r24	; 0x08
  c6:	81 87       	std	Z+9, r24	; 0x09
	
	cfg->txEnable = false;
  c8:	13 86       	std	Z+11, r1	; 0x0b
	cfg->rxEnable = false;
  ca:	12 86       	std	Z+10, r1	; 0x0a
  cc:	08 95       	ret

000000ce <lib_usart_init>:

@return -
	0 if configuration is successfully
	1 if failed
*/
int lib_usart_init(struct usart_config_t *cfg){
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	ec 01       	movw	r28, r24
	uint16_t bout_reg_value = 0;
	
	/* disable usart */
	UCSR0B  &= ~( _BV(TXEN0) | _BV(RXEN0) );
  d4:	e1 ec       	ldi	r30, 0xC1	; 193
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	87 7e       	andi	r24, 0xE7	; 231
  dc:	80 83       	st	Z, r24
	
	/* set usart mode*/ 
	UCSR0C = (UCSR0C &  ~(_BV(UMSEL00) | _BV(UMSEL01)) ) 
  de:	e2 ec       	ldi	r30, 0xC2	; 194
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8f 73       	andi	r24, 0x3F	; 63
  e6:	9c 81       	ldd	r25, Y+4	; 0x04
  e8:	89 2b       	or	r24, r25
  ea:	80 83       	st	Z, r24
			 | cfg->mode; 
	switch(cfg->mode){
  ec:	8c 81       	ldd	r24, Y+4	; 0x04
  ee:	88 23       	and	r24, r24
  f0:	21 f0       	breq	.+8      	; 0xfa <lib_usart_init+0x2c>
  f2:	80 34       	cpi	r24, 0x40	; 64
  f4:	09 f0       	breq	.+2      	; 0xf8 <lib_usart_init+0x2a>
  f6:	52 c0       	rjmp	.+164    	; 0x19c <lib_usart_init+0xce>
  f8:	14 c0       	rjmp	.+40     	; 0x122 <lib_usart_init+0x54>
		case USART_ASYNCH_MODE:
			bout_reg_value = ( ((uint32_t)F_CPU/16)/cfg->boudrate) -1; //baud rate
  fa:	28 81       	ld	r18, Y
  fc:	39 81       	ldd	r19, Y+1	; 0x01
  fe:	4a 81       	ldd	r20, Y+2	; 0x02
 100:	5b 81       	ldd	r21, Y+3	; 0x03
 102:	60 e9       	ldi	r22, 0x90	; 144
 104:	70 ed       	ldi	r23, 0xD0	; 208
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 4c 01 	call	0x298	; 0x298 <__udivmodsi4>
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	31 09       	sbc	r19, r1
		default:
			return 1;
	}
	
	/* set boudrate register */
	UBRR0 = bout_reg_value;
 112:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 116:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/* set data frame size */		
	if(cfg->dFrameSize != USART_DATA_FRAME_9x){
 11a:	8d 81       	ldd	r24, Y+5	; 0x05
 11c:	87 30       	cpi	r24, 0x07	; 7
 11e:	59 f4       	brne	.+22     	; 0x136 <lib_usart_init+0x68>
 120:	11 c0       	rjmp	.+34     	; 0x144 <lib_usart_init+0x76>
				return ERROR if given F_CPU is not capable to config the given boud rate
			*/
			
			break;
		case USART_SYNCH_MODE:
			UCSR0C = ( UCSR0C &  ~_BV(UCPOL0) )							//set SYNCH mode clock polarity
 122:	e2 ec       	ldi	r30, 0xC2	; 194
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	8e 7f       	andi	r24, 0xFE	; 254
 12a:	9c 85       	ldd	r25, Y+12	; 0x0c
 12c:	89 2b       	or	r24, r25
 12e:	80 83       	st	Z, r24
			bout_reg_value = ( ((uint32_t)F_CPU/2)/cfg->boudrate) -1;	//baud rate
		
		case USART_MASTER_SPI_MODE:
			bout_reg_value = ( ((uint32_t)F_CPU/2)/cfg->boudrate) -1;	//baud rate
		default:
			return 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	38 c0       	rjmp	.+112    	; 0x1a6 <lib_usart_init+0xd8>
	/* set boudrate register */
	UBRR0 = bout_reg_value;
	
	/* set data frame size */		
	if(cfg->dFrameSize != USART_DATA_FRAME_9x){
		UCSR0C = ( UCSR0C & ~ (_BV(UCSZ00) | _BV(UCSZ01)) ) 
 136:	e2 ec       	ldi	r30, 0xC2	; 194
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	90 81       	ld	r25, Z
 13c:	99 7f       	andi	r25, 0xF9	; 249
 13e:	89 2b       	or	r24, r25
 140:	80 83       	st	Z, r24
 142:	0d c0       	rjmp	.+26     	; 0x15e <lib_usart_init+0x90>
				| cfg->dFrameSize;
	}else{
		UCSR0C = ( UCSR0C & ~(_BV(UCSZ00) | _BV(UCSZ01)) ) | 0x06;
 144:	e2 ec       	ldi	r30, 0xC2	; 194
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	86 60       	ori	r24, 0x06	; 6
 14c:	80 83       	st	Z, r24
		UCSR0B |= _BV(UCSZ02);
 14e:	e1 ec       	ldi	r30, 0xC1	; 193
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	84 60       	ori	r24, 0x04	; 4
 156:	80 83       	st	Z, r24
		
		dFrameis9x = true;	//indicates that data frame is 9 bit
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	}
	
	/* set the stop bit size */
	UCSR0C = (UCSR0C & ~_BV(USBS0)) 
 15e:	e2 ec       	ldi	r30, 0xC2	; 194
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	87 7f       	andi	r24, 0xF7	; 247
 166:	9f 81       	ldd	r25, Y+7	; 0x07
 168:	89 2b       	or	r24, r25
 16a:	80 83       	st	Z, r24
			 | cfg->stopBits;
	
	/* set the parity */
	UCSR0C = (UCSR0C & ~(_BV(UPM01) | _BV(UPM00)) )
 16c:	80 81       	ld	r24, Z
 16e:	8f 7c       	andi	r24, 0xCF	; 207
 170:	9e 81       	ldd	r25, Y+6	; 0x06
 172:	89 2b       	or	r24, r25
 174:	80 83       	st	Z, r24
			 | cfg->parityMode; 

	/* enable RX */
	if(cfg->rxEnable){
 176:	8a 85       	ldd	r24, Y+10	; 0x0a
 178:	88 23       	and	r24, r24
 17a:	29 f0       	breq	.+10     	; 0x186 <lib_usart_init+0xb8>
		UCSR0B |= _BV(RXEN0);
 17c:	e1 ec       	ldi	r30, 0xC1	; 193
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	80 61       	ori	r24, 0x10	; 16
 184:	80 83       	st	Z, r24
	}
	
	/* enable TX */
	if(cfg->txEnable){
 186:	8b 85       	ldd	r24, Y+11	; 0x0b
 188:	88 23       	and	r24, r24
 18a:	59 f0       	breq	.+22     	; 0x1a2 <lib_usart_init+0xd4>
		UCSR0B |= _BV(TXEN0);
 18c:	e1 ec       	ldi	r30, 0xC1	; 193
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	88 60       	ori	r24, 0x08	; 8
 194:	80 83       	st	Z, r24
	}
	
	return 0;
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <lib_usart_init+0xd8>
			bout_reg_value = ( ((uint32_t)F_CPU/2)/cfg->boudrate) -1;	//baud rate
		
		case USART_MASTER_SPI_MODE:
			bout_reg_value = ( ((uint32_t)F_CPU/2)/cfg->boudrate) -1;	//baud rate
		default:
			return 1;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <lib_usart_init+0xd8>
	/* enable TX */
	if(cfg->txEnable){
		UCSR0B |= _BV(TXEN0);
	}
	
	return 0;
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <lib_uart_write_char>:


//write one byte to serial port
int lib_uart_write_char(char data){
	while( !(UCSR0A & 0x20));			//wait until buffer empty
 1ac:	e0 ec       	ldi	r30, 0xC0	; 192
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	90 81       	ld	r25, Z
 1b2:	95 ff       	sbrs	r25, 5
 1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <lib_uart_write_char+0x4>
	UDR0 = data;	
 1b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	
	return 0;
}
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	08 95       	ret

000001c0 <lib_uart_write_string>:




int lib_uart_write_string(char str[]){
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
	int len = strlen(str);
 1c8:	ec 01       	movw	r28, r24
 1ca:	09 90       	ld	r0, Y+
 1cc:	00 20       	and	r0, r0
 1ce:	e9 f7       	brne	.-6      	; 0x1ca <lib_uart_write_string+0xa>
 1d0:	21 97       	sbiw	r28, 0x01	; 1
 1d2:	c8 1b       	sub	r28, r24
 1d4:	d9 0b       	sbc	r29, r25
	int i = 0;
	while(len--){
 1d6:	41 f0       	breq	.+16     	; 0x1e8 <lib_uart_write_string+0x28>
 1d8:	8c 01       	movw	r16, r24
		lib_uart_write_char(str[i++]);
 1da:	f8 01       	movw	r30, r16
 1dc:	81 91       	ld	r24, Z+
 1de:	8f 01       	movw	r16, r30
 1e0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lib_uart_write_char>
 1e4:	21 97       	sbiw	r28, 0x01	; 1


int lib_uart_write_string(char str[]){
	int len = strlen(str);
	int i = 0;
	while(len--){
 1e6:	c9 f7       	brne	.-14     	; 0x1da <lib_uart_write_string+0x1a>
		lib_uart_write_char(str[i++]);
	}	
}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	08 95       	ret

000001f2 <lib_usart_read_char>:

@return -
	0 - if success
	1 - if error
*/
int lib_usart_read_char(char *ch){
 1f2:	dc 01       	movw	r26, r24
	int count = 1 ;
	while( !(UCSR0A & _BV(RXC0)) ){
 1f4:	23 e6       	ldi	r18, 0x63	; 99
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	e0 ec       	ldi	r30, 0xC0	; 192
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <lib_usart_read_char+0x12>
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	31 09       	sbc	r19, r1
		count ++;
		if (count == 100) 
 202:	49 f0       	breq	.+18     	; 0x216 <lib_usart_read_char+0x24>
	0 - if success
	1 - if error
*/
int lib_usart_read_char(char *ch){
	int count = 1 ;
	while( !(UCSR0A & _BV(RXC0)) ){
 204:	90 81       	ld	r25, Z
 206:	99 23       	and	r25, r25
 208:	d4 f7       	brge	.-12     	; 0x1fe <lib_usart_read_char+0xc>
		count ++;
		if (count == 100) 
			return 1;			
	}
	
	*ch = UDR0;
 20a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 20e:	8c 93       	st	X, r24
	return 0;
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	08 95       	ret
int lib_usart_read_char(char *ch){
	int count = 1 ;
	while( !(UCSR0A & _BV(RXC0)) ){
		count ++;
		if (count == 100) 
			return 1;			
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	*ch = UDR0;
	return 0;
}
 21a:	08 95       	ret

0000021c <main>:
#include <stdbool.h>
#include "lib_usart.h"



int main(void){
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
 224:	a2 97       	sbiw	r28, 0x22	; 34
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
	
	/* initialize the serial block */
	struct usart_config_t config;
	lib_usart_get_defaults(&config);
 230:	ce 01       	movw	r24, r28
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	0e 94 53 00 	call	0xa6	; 0xa6 <lib_usart_get_defaults>
	config.boudrate = 19200;
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	9b e4       	ldi	r25, 0x4B	; 75
 23c:	a0 e0       	ldi	r26, 0x00	; 0
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	89 83       	std	Y+1, r24	; 0x01
 242:	9a 83       	std	Y+2, r25	; 0x02
 244:	ab 83       	std	Y+3, r26	; 0x03
 246:	bc 83       	std	Y+4, r27	; 0x04
	config.mode =  USART_ASYNCH_MODE;
 248:	1d 82       	std	Y+5, r1	; 0x05
	config.dFrameSize = USART_DATA_FRAME_8x;
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	8e 83       	std	Y+6, r24	; 0x06
	config.parityMode = USART_PARITY_DISABLE;
 24e:	1f 82       	std	Y+7, r1	; 0x07
	config.stopBits = USART_STOPBITS_1x;
 250:	18 86       	std	Y+8, r1	; 0x08
	config.rxEnable = true;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	8b 87       	std	Y+11, r24	; 0x0b
	config.txEnable = true;
 256:	8c 87       	std	Y+12, r24	; 0x0c
	if(lib_usart_init(&config)){				//initialize the serial port
 258:	ce 01       	movw	r24, r28
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	0e 94 67 00 	call	0xce	; 0xce <lib_usart_init>
 260:	89 2b       	or	r24, r25
 262:	09 f0       	breq	.+2      	; 0x266 <main+0x4a>
 264:	ff cf       	rjmp	.-2      	; 0x264 <main+0x48>
		while(1);
	}
	
	char str[] = "hello Atmega 328p!\n";
 266:	84 e1       	ldi	r24, 0x14	; 20
 268:	e0 e0       	ldi	r30, 0x00	; 0
 26a:	f1 e0       	ldi	r31, 0x01	; 1
 26c:	de 01       	movw	r26, r28
 26e:	1e 96       	adiw	r26, 0x0e	; 14
 270:	01 90       	ld	r0, Z+
 272:	0d 92       	st	X+, r0
 274:	8a 95       	dec	r24
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0x54>
	char input;
	
	lib_uart_write_string(str);
 278:	ce 01       	movw	r24, r28
 27a:	0e 96       	adiw	r24, 0x0e	; 14
 27c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lib_uart_write_string>
	while (1) {
		//lib_uart_write_string(str);
		//lib_uart_write_char((char)10);
		//lib_uart_write_char((char)13);
		//_delay_ms(1000);
		if( lib_usart_read_char(&input) == 0){
 280:	ce 01       	movw	r24, r28
 282:	82 96       	adiw	r24, 0x22	; 34
 284:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lib_usart_read_char>
 288:	89 2b       	or	r24, r25
 28a:	d1 f7       	brne	.-12     	; 0x280 <main+0x64>
			lib_uart_write_char(input+1);		
 28c:	8a a1       	ldd	r24, Y+34	; 0x22
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lib_uart_write_char>
 296:	f4 cf       	rjmp	.-24     	; 0x280 <main+0x64>

00000298 <__udivmodsi4>:
 298:	a1 e2       	ldi	r26, 0x21	; 33
 29a:	1a 2e       	mov	r1, r26
 29c:	aa 1b       	sub	r26, r26
 29e:	bb 1b       	sub	r27, r27
 2a0:	fd 01       	movw	r30, r26
 2a2:	0d c0       	rjmp	.+26     	; 0x2be <__udivmodsi4_ep>

000002a4 <__udivmodsi4_loop>:
 2a4:	aa 1f       	adc	r26, r26
 2a6:	bb 1f       	adc	r27, r27
 2a8:	ee 1f       	adc	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	a2 17       	cp	r26, r18
 2ae:	b3 07       	cpc	r27, r19
 2b0:	e4 07       	cpc	r30, r20
 2b2:	f5 07       	cpc	r31, r21
 2b4:	20 f0       	brcs	.+8      	; 0x2be <__udivmodsi4_ep>
 2b6:	a2 1b       	sub	r26, r18
 2b8:	b3 0b       	sbc	r27, r19
 2ba:	e4 0b       	sbc	r30, r20
 2bc:	f5 0b       	sbc	r31, r21

000002be <__udivmodsi4_ep>:
 2be:	66 1f       	adc	r22, r22
 2c0:	77 1f       	adc	r23, r23
 2c2:	88 1f       	adc	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	1a 94       	dec	r1
 2c8:	69 f7       	brne	.-38     	; 0x2a4 <__udivmodsi4_loop>
 2ca:	60 95       	com	r22
 2cc:	70 95       	com	r23
 2ce:	80 95       	com	r24
 2d0:	90 95       	com	r25
 2d2:	9b 01       	movw	r18, r22
 2d4:	ac 01       	movw	r20, r24
 2d6:	bd 01       	movw	r22, r26
 2d8:	cf 01       	movw	r24, r30
 2da:	08 95       	ret

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
